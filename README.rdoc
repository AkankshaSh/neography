== Welcome to Neography

Neography is a thin ruby wrapper to the Neo4j Rest API, for more information:
* {Getting Started with REST for Neo4j}[http://wiki.neo4j.org/content/Getting_Started_REST]
* {Neo4j Rest API Reference}[http://components.neo4j.org/neo4j-rest/]


=== Installation

  gem install 'neography'
  require 'neography'


==== Configuration

  Neography::Config.use do |config|
    config[:protocol] = 'http://'
    config[:server] = 'localhost'
    config[:port] = '9999'
  end

==== Rails

Just add gem 'neography' to your Gemfile and run bundle install

Use the defaults (shown above) or create neography.rb in your config/initializers directory.

=== Documentation

There are two ways to use Neography:

A thin ruby wrapper Neography::Rest which tries to mirror the Neo4j Rest API and returns JSON or Nil:

  Neography::Rest.get_root                                     # Get the root node
  Neography::Rest.create_node                                  # Create an empty node
  Neography::Rest.create_node("age" => 31, "name" => "Max")    # Create a node with some properties
  Neography::Rest.get_node(id)                                 # Get a node and its properties
  Neography::Rest.delete_node(id)                              # Delete an unrelated node
  Neography::Rest.delete_node!(id)                             # Delete a node and all its relationships

  Neography::Rest.reset_node_properties(id, {"age" => 31})     # Reset a node's properties
  Neography::Rest.set_node_properties(id, {"weight" => 200})   # Set a node's properties
  Neography::Rest.get_node_properties(id)                      # Get just the node properties
  Neography::Rest.get_node_properties(id, ["weight","age"])    # Get some of the node properties
  Neography::Rest.remove_node_properties(id)                   # Remove all properties of a node
  Neography::Rest.remove_node_properties(id, "weight")         # Remove one property of a node
  Neography::Rest.remove_node_properties(id, ["weight","age"]) # Remove multiple properties of a node

  Neography::Rest.create_relationship("friends", node1, node2)        # Create a relationship between node1 and node2
  Neography::Rest.get_node_relationships(id)                          # Get all relationships
  Neography::Rest.get_node_relationships(id, "incoming")              # Get only incoming relationships
  Neography::Rest.get_node_relationships(id, "all", "enemies")        # Get all relationships of type enemies
  Neography::Rest.get_node_relationships(id, "incoming", "enemies")   # Get only incoming relationships of type enemies
  Neography::Rest.delete_relationship(id)                             # Delete a relationship

  Neography::Rest.reset_relationship_properties(id, {"age" => 31})    # Reset a relationship's properties
  Neography::Rest.set_relationship_properties(id, {"weight" => 200})  # Set a relationship's properties
  Neography::Rest.get_relationship_properties(id)                     # Get just the relationship properties
  Neography::Rest.get_relationship_properties(id, ["since","met"])    # Get some of the relationship properties
  Neography::Rest.remove_relationship_properties(id)                  # Remove all properties of a relationship
  Neography::Rest.remove_relationship_properties(id, "since")         # Remove one property of a relationship
  Neography::Rest.remove_relationship_properties(id, ["since","met"]) # Remove multiple properties of a relationship

  Neography::Rest.list_indexes                        # doesn't really seam to do what the api says it does
  Neography::Rest.add_to_index(key, value, id)        # adds a node to an index with the given key/value pair
  Neography::Rest.remove_from_index(key, value, id)   # removes a node to an index with the given key/value pair
  Neography::Rest.get_index(key, value)               # gets an index with the given key/value pair

... and a work in progress more rubyish layer that's not quite ready for use yet.

  Neography::Node.new                                              # Create an empty node
  Neography::Node.new(:age => 31, :name => "Max")                  # Create a node with some properties
  Neography::Node.load(id)                                         # Get a node and its properties
  Neography::Node.set_properties(3, {:age => 31, :name => "Max"} ) # Deletes any existing properties with the passed hash
  Neography::Node.properties(3)                                    # Returns a hash of a node's properties or nil
  Neography::Node.remove_property(3, :age)                         # Deletes the existing property
  Neography::Node.del(3)                                           # Deletes a node without any relationships
  Neography::Node.del!(3)                                          # Deletes a node and all its relationships

=== License

* Neography - MIT, see the LICENSE file http://github.com/maxdemarzi/neography/tree/master/LICENSE.
* Lucene -  Apache, see http://lucene.apache.org/java/docs/features.html
* Neo4j - Dual free software/commercial license, see http://neo4j.org/


